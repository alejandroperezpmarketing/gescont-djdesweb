
from connPOO import Conn



  
class Buildings():
    conn:Conn
    def __init__(self,conn:Conn,table,d):
        self.conn=conn
        self.table=table
        self.d=d
        
        
    gid = {}

    def insert(self,d)->int:
        
        q =f"insert into d.{d['table']}(descripcion,area, geom) values (%s,st_area(st_geometryfromtext(%s,25830)),st_geometryfromtext(%s,25830)) returning gid"
        self.conn.cursor.execute(q,[d['descripcion'],d['geomWkt'], d['geomWkt'])
        self.conn.conn.commit()
        gid = self.conn.cursor.fetchall()[0][0]
        return {'ok':True,'message':f'Entidad insertada en: {table}. gid: {gid}','data':[[gid]]}
         
       
    def Insert(d):
        
        self._insert()
        #insert a row with a dictionary
        
    
    
    def buildingDelete(gid):
        pass
        #deletes the row than matches with the gid
    
    def buildingUpdate(d):
        pass
        #inside the dictionary you have the gid of the row to update, and the new row data
    def buildingSelect(gid):
        pass
        #returns a list with the row that coincide
        list = [] #list with all the rows. Each row has to be a dictionary.
        with gid:
            for count, gid in enumerate(gid):
                row = {}
                if gid is None:
                    return list
                else:
                    row[count] = gid
                    list.append(row)
                return list
