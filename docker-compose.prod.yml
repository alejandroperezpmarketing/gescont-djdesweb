services:
  # postgis:
  #   image: postgis/postgis:16-3.4
  #   restart: unless-stopped
  #   env_file:
  #     - .env
  #     - .env.prod
  #   ports:
  #     - ${PRODUCTION_DOCKER_POSTGIS_FORWARDED_PORT}:5432
  #   volumes: 
  #     - production-postgis-data:/var/lib/postgresql/data

  #   #to ckeck if postgres is already ready. It is used in the depends_on section
  #   #of the services that use this service
  #   healthcheck:
  #       test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
  #       interval: 10s
  #       timeout: 5s
  #       retries: 5
  #   networks:
  #     - postgis

  # pgadmin4:
  #   image: dpage/pgadmin4:8.3
  #   env_file:
  #     - .env
  #     - .env.prod
  #   volumes:
  #     - ./pgadmin4-prod/data:/var/lib/pgadmin
  #     - ./pgadmin4-prod/servers/servers.json:/pgadmin4/servers.json
  #   ports:
  #     - ${PRODUCTION_PGADMIN4_FORWARDED_PORT}:80
  #   restart: unless-stopped
  #   networks:
  #     - postgis
  #   depends_on:
  #     postgis:
  #       condition: service_healthy

  djdesweb:
    container_name: alejandro_perez_api_djdesweb_1
    restart: unless-stopped
    build: ./alejandro_perez_docker_code_djdesweb
    command: gunicorn alejandro_perez_api.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - ./alejandro_perez_docker_code_djdesweb:/usr/src/app
    ports:
      - ${PRODUCTION_DOCKER_DJANGO_API_FORWARDED_PORT}:8000
    env_file:
      - .env
      - .env.prod
    networks:
      - postgis_postgis

    #to ckeck if postgres is already ready. This service
    #will not start up to the posgis service is ready
    # depends_on:
    #   postgis:
    #     condition: service_healthy
networks:
   postgis_postgis:
      driver: bridge

volumes:
  production-postgis-data:
    driver: local
